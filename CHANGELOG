Since 0.2:

    * NtStatusException is now a WindowsError
    * Add shr/shl RM32(64)/Imm8
    * Small fix simple_x64 Imm8 encoding
    * `execute_64bits_code_from_syswow` able to return ULONG64
    * utils.get_short_path / utils.get_long_path
    * Object returned by `windows.native_exec.create_function` has an attribute `code_addr` with the address of the executable code
    * add `windows.winproxy.is_implemented` Ex: windows.winproxy.is_implemented(windows.winproxy.QueryWorkingSetEx)
    * registry.py handle REG_QWORD manually (_winreg does not)
    * CurrentProcessReadSyswow doest not use ``current_process.handle`` anymore but ``OpenProcess(current_process.pid)`` (Compat windows10 where method 1 doest not work)
    * Add: system.handles (winobject\handle.py)
    * You can have multiple execute_python_unsafe at the same time in the same process (didn't know: consequence of new injection code)
    * WinProcess.execute_python does not regenerate/reinject the python_exec_shellcode for each execution
    * generate.py cleaned with class and stuff / usable for extern project (cc lkd)
    * Added COMImplementation to com interface
    * fix x86.assemble + add x64.assemble | fix some encoding problem in x64
    * Add test_code.py sample
    * Remove OptionExport from winproxy
    * MemoryBP + single_step for windows.debug.Debugger
    * Possibility to delete breakpoints in windows.debug.Debugger
    * Add Context.func_result as abstract register for EAX/RAX
    * Can retrieve 64b context of syswow thread via context_syswow/set_syswow_context
    * Debugger handle breakpoint in 64b part of syswow process
    * ReadSyswow64Process is now a Process (allows to parse exports of remote PEB64 of syswow process)
    * Added Debugger.detach


Since 0.3:

    * Rewrote pe_parse to minimize closure (allowing the refcount to dell all ref to WinProcess when the debugger detach it)
    * Fix debugger.detach / handling on exit_process